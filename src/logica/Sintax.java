
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 21 16:10:03 COT 2021
//----------------------------------------------------

package logica;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 21 16:10:03 COT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\007\000\002\002" +
    "\011\000\002\002\007\000\002\002\010\000\002\002\006" +
    "\000\002\002\011\000\002\002\010\000\002\002\002\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\005\000\002\003\004" +
    "\000\002\003\003\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\004\005\000\002" +
    "\004\005\000\002\004\007\000\002\004\007\000\002\004" +
    "\011\000\002\004\007\000\002\004\011\000\002\004\006" +
    "\000\002\004\006\000\002\004\011\000\002\004\010\000" +
    "\002\004\010\000\002\004\011\000\002\004\011\000\002" +
    "\006\016\000\002\013\003\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\006\000\002\013\007" +
    "\000\002\007\015\000\002\007\013\000\002\010\011\000" +
    "\002\010\010\000\002\011\013\000\002\011\015\000\002" +
    "\012\011\000\002\012\010\000\002\014\013\000\002\014" +
    "\011\000\002\005\005\000\002\005\004\000\002\005\004" +
    "\000\002\005\010\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\016\012\000\002\017\006\000\002" +
    "\017\010\000\002\017\007\000\002\017\007\000\002\017" +
    "\006\000\002\017\010\000\002\017\012\000\002\017\011" +
    "\000\002\017\011\000\002\017\010\000\002\020\006\000" +
    "\002\020\010\000\002\020\007\000\002\020\006\000\002" +
    "\020\010\000\002\020\007\000\002\020\010\000\002\020" +
    "\012\000\002\020\011\000\002\020\010\000\002\020\012" +
    "\000\002\020\011\000\002\021\011\000\002\021\011\000" +
    "\002\021\011\000\002\022\005\000\002\022\005\000\002" +
    "\022\010\000\002\022\010\000\002\022\013\000\002\022" +
    "\013\000\002\022\015\000\002\022\015\000\002\022\010" +
    "\000\002\022\010\000\002\022\012\000\002\022\012\000" +
    "\002\022\007\000\002\022\011\000\002\023\011\000\002" +
    "\023\013\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0172\000\016\002\ufff9\015\010\043\006\101\011\102" +
    "\004\105\005\001\002\000\004\103\u0171\001\002\000\004" +
    "\046\u016a\001\002\000\004\034\u0165\001\002\000\004\002" +
    "\u0164\001\002\000\004\043\022\001\002\000\004\026\012" +
    "\001\002\000\004\046\013\001\002\000\006\026\014\045" +
    "\015\001\002\000\016\002\ufff9\015\010\043\006\101\011" +
    "\102\004\105\005\001\002\000\004\046\016\001\002\000" +
    "\004\026\017\001\002\000\016\002\ufff9\015\010\043\006" +
    "\101\011\102\004\105\005\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\000\001\002\000\004\034\023\001\002" +
    "\000\004\035\024\001\002\000\004\037\025\001\002\000" +
    "\054\006\032\007\050\010\030\013\043\014\051\015\045" +
    "\020\071\021\066\022\067\023\044\024\035\030\070\046" +
    "\064\050\053\052\060\062\037\067\042\075\041\077\065" +
    "\100\052\106\063\001\002\000\054\006\uffed\007\uffed\010" +
    "\uffed\012\uffed\013\uffed\014\uffed\015\uffed\020\uffed\021\uffed" +
    "\022\uffed\023\uffed\024\uffed\040\uffed\050\uffed\052\uffed\062" +
    "\uffed\067\uffed\075\uffed\077\uffed\100\uffed\106\uffed\001\002" +
    "\000\054\006\ufff3\007\ufff3\010\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\040\ufff3\050\ufff3\052\ufff3\062\ufff3\067\ufff3\075\ufff3\077" +
    "\ufff3\100\ufff3\106\ufff3\001\002\000\004\034\u0151\001\002" +
    "\000\054\006\uffeb\007\uffeb\010\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\040\uffeb\050\uffeb\052\uffeb\062\uffeb\067\uffeb\075\uffeb\077" +
    "\uffeb\100\uffeb\106\uffeb\001\002\000\006\030\u013a\046\u013b" +
    "\001\002\000\054\006\uffe1\007\uffe1\010\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\040\uffe1\050\uffe1\052\uffe1\062\uffe1\067\uffe1\075" +
    "\uffe1\077\uffe1\100\uffe1\106\uffe1\001\002\000\054\006\uffdd" +
    "\007\uffdd\010\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\040\uffdd\050\uffdd" +
    "\052\uffdd\062\uffdd\067\uffdd\075\uffdd\077\uffdd\100\uffdd\106" +
    "\uffdd\001\002\000\054\006\uff88\007\uff88\010\uff88\012\uff88" +
    "\013\uff88\014\uff88\015\uff88\020\uff88\021\uff88\022\uff88\023" +
    "\uff88\024\uff88\040\uff88\050\uff88\052\uff88\062\uff88\067\uff88" +
    "\075\uff88\077\uff88\100\uff88\106\uff88\001\002\000\054\006" +
    "\032\007\050\010\030\012\155\013\043\014\051\015\045" +
    "\020\071\021\066\022\067\023\044\024\035\040\u0139\050" +
    "\053\052\060\062\037\067\042\075\041\077\065\100\052" +
    "\106\063\001\002\000\004\054\u0133\001\002\000\054\006" +
    "\uffee\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee\015\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\040\uffee\050" +
    "\uffee\052\uffee\062\uffee\067\uffee\075\uffee\077\uffee\100\uffee" +
    "\106\uffee\001\002\000\004\026\u0110\001\002\000\010\031" +
    "\170\046\u010c\047\u010a\001\002\000\004\034\u0103\001\002" +
    "\000\054\006\uff89\007\uff89\010\uff89\012\uff89\013\uff89\014" +
    "\uff89\015\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89" +
    "\040\uff89\050\uff89\052\uff89\062\uff89\067\uff89\075\uff89\077" +
    "\uff89\100\uff89\106\uff89\001\002\000\004\046\376\001\002" +
    "\000\054\006\uffe9\007\uffe9\010\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\040\uffe9\050\uffe9\052\uffe9\062\uffe9\067\uffe9\075\uffe9\077" +
    "\uffe9\100\uffe9\106\uffe9\001\002\000\054\006\ufff5\007\ufff5" +
    "\010\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\020\ufff5\021" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\040\ufff5\050\ufff5\052\ufff5" +
    "\062\ufff5\067\ufff5\075\ufff5\077\ufff5\100\ufff5\106\ufff5\001" +
    "\002\000\004\046\357\001\002\000\004\034\330\001\002" +
    "\000\004\034\313\001\002\000\004\034\273\001\002\000" +
    "\054\006\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\040" +
    "\uffe7\050\uffe7\052\uffe7\062\uffe7\067\uffe7\075\uffe7\077\uffe7" +
    "\100\uffe7\106\uffe7\001\002\000\054\006\uffdf\007\uffdf\010" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\040\uffdf\050\uffdf\052\uffdf\062" +
    "\uffdf\067\uffdf\075\uffdf\077\uffdf\100\uffdf\106\uffdf\001\002" +
    "\000\054\006\uffe3\007\uffe3\010\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\040\uffe3\050\uffe3\052\uffe3\062\uffe3\067\uffe3\075\uffe3\077" +
    "\uffe3\100\uffe3\106\uffe3\001\002\000\054\006\ufff7\007\ufff7" +
    "\010\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\020\ufff7\021" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\040\ufff7\050\ufff7\052\ufff7" +
    "\062\ufff7\067\ufff7\075\ufff7\077\ufff7\100\ufff7\106\ufff7\001" +
    "\002\000\012\005\223\046\224\047\221\110\222\001\002" +
    "\000\054\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\040\uffe5\050\uffe5\052\uffe5\062\uffe5\067\uffe5\075\uffe5\077" +
    "\uffe5\100\uffe5\106\uffe5\001\002\000\054\006\ufff1\007\ufff1" +
    "\010\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\040\ufff1\050\ufff1\052\ufff1" +
    "\062\ufff1\067\ufff1\075\ufff1\077\ufff1\100\ufff1\106\ufff1\001" +
    "\002\000\004\037\137\001\002\000\006\027\130\030\131" +
    "\001\002\000\004\026\073\001\002\000\054\006\uff8b\007" +
    "\uff8b\010\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\020\uff8b" +
    "\021\uff8b\022\uff8b\023\uff8b\024\uff8b\040\uff8b\050\uff8b\052" +
    "\uff8b\062\uff8b\067\uff8b\075\uff8b\077\uff8b\100\uff8b\106\uff8b" +
    "\001\002\000\054\006\uff8a\007\uff8a\010\uff8a\012\uff8a\013" +
    "\uff8a\014\uff8a\015\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a" +
    "\024\uff8a\040\uff8a\050\uff8a\052\uff8a\062\uff8a\067\uff8a\075" +
    "\uff8a\077\uff8a\100\uff8a\106\uff8a\001\002\000\004\046\072" +
    "\001\002\000\054\006\uff8c\007\uff8c\010\uff8c\012\uff8c\013" +
    "\uff8c\014\uff8c\015\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c" +
    "\024\uff8c\040\uff8c\050\uff8c\052\uff8c\062\uff8c\067\uff8c\075" +
    "\uff8c\077\uff8c\100\uff8c\106\uff8c\001\002\000\056\006\uffbb" +
    "\007\uffbb\010\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\035\uffbb\040\uffbb" +
    "\050\uffbb\052\uffbb\062\uffbb\067\uffbb\075\uffbb\077\uffbb\100" +
    "\uffbb\106\uffbb\001\002\000\012\005\076\046\077\047\074" +
    "\110\075\001\002\000\006\026\125\044\124\001\002\000" +
    "\004\110\117\001\002\000\006\005\104\007\105\001\002" +
    "\000\006\026\101\044\100\001\002\000\054\006\uffb5\007" +
    "\uffb5\010\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\024\uffb5\040\uffb5\050\uffb5\052" +
    "\uffb5\062\uffb5\067\uffb5\075\uffb5\077\uffb5\100\uffb5\106\uffb5" +
    "\001\002\000\004\111\102\001\002\000\004\044\103\001" +
    "\002\000\054\006\uffb0\007\uffb0\010\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\015\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\040\uffb0\050\uffb0\052\uffb0\062\uffb0\067\uffb0\075\uffb0" +
    "\077\uffb0\100\uffb0\106\uffb0\001\002\000\006\026\114\044" +
    "\113\001\002\000\004\005\106\001\002\000\006\026\110" +
    "\044\107\001\002\000\054\006\uffb4\007\uffb4\010\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\040\uffb4\050\uffb4\052\uffb4\062\uffb4\067" +
    "\uffb4\075\uffb4\077\uffb4\100\uffb4\106\uffb4\001\002\000\004" +
    "\111\111\001\002\000\004\044\112\001\002\000\054\006" +
    "\uffaf\007\uffaf\010\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf" +
    "\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\040\uffaf\050" +
    "\uffaf\052\uffaf\062\uffaf\067\uffaf\075\uffaf\077\uffaf\100\uffaf" +
    "\106\uffaf\001\002\000\054\006\uffb3\007\uffb3\010\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\040\uffb3\050\uffb3\052\uffb3\062\uffb3\067" +
    "\uffb3\075\uffb3\077\uffb3\100\uffb3\106\uffb3\001\002\000\004" +
    "\111\115\001\002\000\004\044\116\001\002\000\054\006" +
    "\uffae\007\uffae\010\uffae\012\uffae\013\uffae\014\uffae\015\uffae" +
    "\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\040\uffae\050" +
    "\uffae\052\uffae\062\uffae\067\uffae\075\uffae\077\uffae\100\uffae" +
    "\106\uffae\001\002\000\006\026\121\044\120\001\002\000" +
    "\054\006\uffb2\007\uffb2\010\uffb2\012\uffb2\013\uffb2\014\uffb2" +
    "\015\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\040" +
    "\uffb2\050\uffb2\052\uffb2\062\uffb2\067\uffb2\075\uffb2\077\uffb2" +
    "\100\uffb2\106\uffb2\001\002\000\004\111\122\001\002\000" +
    "\004\044\123\001\002\000\054\006\uffad\007\uffad\010\uffad" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\020\uffad\021\uffad\022" +
    "\uffad\023\uffad\024\uffad\040\uffad\050\uffad\052\uffad\062\uffad" +
    "\067\uffad\075\uffad\077\uffad\100\uffad\106\uffad\001\002\000" +
    "\054\006\uffb1\007\uffb1\010\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\040" +
    "\uffb1\050\uffb1\052\uffb1\062\uffb1\067\uffb1\075\uffb1\077\uffb1" +
    "\100\uffb1\106\uffb1\001\002\000\004\111\126\001\002\000" +
    "\004\044\127\001\002\000\054\006\uffac\007\uffac\010\uffac" +
    "\012\uffac\013\uffac\014\uffac\015\uffac\020\uffac\021\uffac\022" +
    "\uffac\023\uffac\024\uffac\040\uffac\050\uffac\052\uffac\062\uffac" +
    "\067\uffac\075\uffac\077\uffac\100\uffac\106\uffac\001\002\000" +
    "\006\046\133\047\132\001\002\000\056\006\uffbc\007\uffbc" +
    "\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\020\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\035\uffbc\040\uffbc\050\uffbc" +
    "\052\uffbc\062\uffbc\067\uffbc\075\uffbc\077\uffbc\100\uffbc\106" +
    "\uffbc\001\002\000\056\006\uffbd\007\uffbd\010\uffbd\012\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\020\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\035\uffbd\040\uffbd\050\uffbd\052\uffbd\062\uffbd" +
    "\067\uffbd\075\uffbd\077\uffbd\100\uffbd\106\uffbd\001\002\000" +
    "\004\020\134\001\002\000\004\047\135\001\002\000\004" +
    "\044\136\001\002\000\056\006\uffba\007\uffba\010\uffba\012" +
    "\uffba\013\uffba\014\uffba\015\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\024\uffba\035\uffba\040\uffba\050\uffba\052\uffba\062" +
    "\uffba\067\uffba\075\uffba\077\uffba\100\uffba\106\uffba\001\002" +
    "\000\054\006\032\007\050\010\030\013\043\014\051\015" +
    "\045\020\071\021\066\022\067\023\044\024\035\030\070" +
    "\046\064\050\053\052\060\062\037\067\042\075\041\077" +
    "\065\100\052\106\063\001\002\000\054\006\032\007\050" +
    "\010\030\012\155\013\043\014\051\015\045\020\071\021" +
    "\066\022\067\023\044\024\035\040\150\050\053\052\060" +
    "\062\037\067\042\075\041\077\065\100\052\106\063\001" +
    "\002\000\054\006\uffec\007\uffec\010\uffec\012\uffec\013\uffec" +
    "\014\uffec\015\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\040\uffec\050\uffec\052\uffec\062\uffec\067\uffec\075\uffec" +
    "\077\uffec\100\uffec\106\uffec\001\002\000\054\006\ufff2\007" +
    "\ufff2\010\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\040\ufff2\050\ufff2\052" +
    "\ufff2\062\ufff2\067\ufff2\075\ufff2\077\ufff2\100\ufff2\106\ufff2" +
    "\001\002\000\054\006\uffe8\007\uffe8\010\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\040\uffe8\050\uffe8\052\uffe8\062\uffe8\067\uffe8\075" +
    "\uffe8\077\uffe8\100\uffe8\106\uffe8\001\002\000\054\006\ufff8" +
    "\007\ufff8\010\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\020" +
    "\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\040\ufff8\050\ufff8" +
    "\052\ufff8\062\ufff8\067\ufff8\075\ufff8\077\ufff8\100\ufff8\106" +
    "\ufff8\001\002\000\054\006\uffe4\007\uffe4\010\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\040\uffe4\050\uffe4\052\uffe4\062\uffe4\067\uffe4" +
    "\075\uffe4\077\uffe4\100\uffe4\106\uffe4\001\002\000\054\006" +
    "\ufff6\007\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\040\ufff6\050" +
    "\ufff6\052\ufff6\062\ufff6\067\ufff6\075\ufff6\077\ufff6\100\ufff6" +
    "\106\ufff6\001\002\000\054\006\uffe0\007\uffe0\010\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\040\uffe0\050\uffe0\052\uffe0\062\uffe0\067" +
    "\uffe0\075\uffe0\077\uffe0\100\uffe0\106\uffe0\001\002\000\004" +
    "\107\215\001\002\000\054\006\ufff4\007\ufff4\010\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\040\ufff4\050\ufff4\052\ufff4\062\ufff4\067" +
    "\ufff4\075\ufff4\077\ufff4\100\ufff4\106\ufff4\001\002\000\054" +
    "\006\uffde\007\uffde\010\uffde\012\uffde\013\uffde\014\uffde\015" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\040\uffde" +
    "\050\uffde\052\uffde\062\uffde\067\uffde\075\uffde\077\uffde\100" +
    "\uffde\106\uffde\001\002\000\004\012\155\001\002\000\054" +
    "\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\040\uffe2" +
    "\050\uffe2\052\uffe2\062\uffe2\067\uffe2\075\uffe2\077\uffe2\100" +
    "\uffe2\106\uffe2\001\002\000\004\037\161\001\002\000\054" +
    "\006\uffe6\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\040\uffe6" +
    "\050\uffe6\052\uffe6\062\uffe6\067\uffe6\075\uffe6\077\uffe6\100" +
    "\uffe6\106\uffe6\001\002\000\054\006\uffef\007\uffef\010\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\020\uffef\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\040\uffef\050\uffef\052\uffef\062\uffef" +
    "\067\uffef\075\uffef\077\uffef\100\uffef\106\uffef\001\002\000" +
    "\054\006\uffea\007\uffea\010\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\040" +
    "\uffea\050\uffea\052\uffea\062\uffea\067\uffea\075\uffea\077\uffea" +
    "\100\uffea\106\uffea\001\002\000\056\006\032\007\050\010" +
    "\030\013\043\014\051\015\045\020\071\021\066\022\067" +
    "\023\044\024\035\030\070\040\162\046\064\050\053\052" +
    "\060\062\037\067\042\075\041\077\065\100\052\106\063" +
    "\001\002\000\004\013\204\001\002\000\054\006\032\007" +
    "\050\010\030\012\155\013\043\014\051\015\045\020\071" +
    "\021\066\022\067\023\044\024\035\040\164\050\053\052" +
    "\060\062\037\067\042\075\041\077\065\100\052\106\063" +
    "\001\002\000\004\013\165\001\002\000\004\034\166\001" +
    "\002\000\006\031\170\046\171\001\002\000\004\035\202" +
    "\001\002\000\006\035\uffcd\044\uffcd\001\002\000\004\026" +
    "\172\001\002\000\012\005\174\031\175\046\176\047\173" +
    "\001\002\000\006\035\uffcb\044\uffcb\001\002\000\006\005" +
    "\177\046\200\001\002\000\006\035\uffcc\044\uffcc\001\002" +
    "\000\006\035\uffca\044\uffca\001\002\000\006\035\uffc9\044" +
    "\uffc9\001\002\000\004\005\201\001\002\000\006\035\uffc8" +
    "\044\uffc8\001\002\000\004\044\203\001\002\000\054\006" +
    "\uffc3\007\uffc3\010\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\040\uffc3\050" +
    "\uffc3\052\uffc3\062\uffc3\067\uffc3\075\uffc3\077\uffc3\100\uffc3" +
    "\106\uffc3\001\002\000\004\034\205\001\002\000\006\031" +
    "\170\046\171\001\002\000\004\035\207\001\002\000\004" +
    "\044\210\001\002\000\004\037\211\001\002\000\054\006" +
    "\032\007\050\010\030\013\043\014\051\015\045\020\071" +
    "\021\066\022\067\023\044\024\035\030\070\046\064\050" +
    "\053\052\060\062\037\067\042\075\041\077\065\100\052" +
    "\106\063\001\002\000\054\006\032\007\050\010\030\012" +
    "\155\013\043\014\051\015\045\020\071\021\066\022\067" +
    "\023\044\024\035\040\213\050\053\052\060\062\037\067" +
    "\042\075\041\077\065\100\052\106\063\001\002\000\054" +
    "\006\uffc2\007\uffc2\010\uffc2\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\040\uffc2" +
    "\050\uffc2\052\uffc2\062\uffc2\067\uffc2\075\uffc2\077\uffc2\100" +
    "\uffc2\106\uffc2\001\002\000\054\006\ufff0\007\ufff0\010\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\024\ufff0\040\ufff0\050\ufff0\052\ufff0\062\ufff0" +
    "\067\ufff0\075\ufff0\077\ufff0\100\ufff0\106\ufff0\001\002\000" +
    "\004\037\216\001\002\000\054\006\032\007\050\010\030" +
    "\013\043\014\051\015\045\020\071\021\066\022\067\023" +
    "\044\024\035\030\070\046\064\050\053\052\060\062\037" +
    "\067\042\075\041\077\065\100\052\106\063\001\002\000" +
    "\054\006\032\007\050\010\030\012\155\013\043\014\051" +
    "\015\045\020\071\021\066\022\067\023\044\024\035\040" +
    "\220\050\053\052\060\062\037\067\042\075\041\077\065" +
    "\100\052\106\063\001\002\000\054\006\uffb6\007\uffb6\010" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\020\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\040\uffb6\050\uffb6\052\uffb6\062" +
    "\uffb6\067\uffb6\075\uffb6\077\uffb6\100\uffb6\106\uffb6\001\002" +
    "\000\004\054\261\001\002\000\004\046\250\001\002\000" +
    "\004\046\237\001\002\000\004\054\225\001\002\000\060" +
    "\006\uff9b\007\uff9b\010\uff9b\012\uff9b\013\uff9b\014\uff9b\015" +
    "\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\037\227" +
    "\040\uff9b\050\uff9b\051\226\052\uff9b\062\uff9b\067\uff9b\075" +
    "\uff9b\077\uff9b\100\uff9b\106\uff9b\001\002\000\004\044\235" +
    "\001\002\000\054\006\032\007\050\010\030\013\043\014" +
    "\051\015\045\020\071\021\066\022\067\023\044\024\035" +
    "\030\070\046\064\050\053\052\060\062\037\067\042\075" +
    "\041\077\065\100\052\106\063\001\002\000\054\006\032" +
    "\007\050\010\030\012\155\013\043\014\051\015\045\020" +
    "\071\021\066\022\067\023\044\024\035\040\231\050\053" +
    "\052\060\062\037\067\042\075\041\077\065\100\052\106" +
    "\063\001\002\000\056\006\uff93\007\uff93\010\uff93\012\uff93" +
    "\013\uff93\014\uff93\015\uff93\020\uff93\021\uff93\022\uff93\023" +
    "\uff93\024\uff93\040\uff93\050\uff93\051\232\052\uff93\062\uff93" +
    "\067\uff93\075\uff93\077\uff93\100\uff93\106\uff93\001\002\000" +
    "\004\044\233\001\002\000\006\052\060\062\037\001\002" +
    "\000\054\006\uff97\007\uff97\010\uff97\012\uff97\013\uff97\014" +
    "\uff97\015\uff97\020\uff97\021\uff97\022\uff97\023\uff97\024\uff97" +
    "\040\uff97\050\uff97\052\uff97\062\uff97\067\uff97\075\uff97\077" +
    "\uff97\100\uff97\106\uff97\001\002\000\006\052\060\062\037" +
    "\001\002\000\054\006\uff99\007\uff99\010\uff99\012\uff99\013" +
    "\uff99\014\uff99\015\uff99\020\uff99\021\uff99\022\uff99\023\uff99" +
    "\024\uff99\040\uff99\050\uff99\052\uff99\062\uff99\067\uff99\075" +
    "\uff99\077\uff99\100\uff99\106\uff99\001\002\000\004\005\240" +
    "\001\002\000\004\054\241\001\002\000\004\037\242\001" +
    "\002\000\054\006\032\007\050\010\030\013\043\014\051" +
    "\015\045\020\071\021\066\022\067\023\044\024\035\030" +
    "\070\046\064\050\053\052\060\062\037\067\042\075\041" +
    "\077\065\100\052\106\063\001\002\000\054\006\032\007" +
    "\050\010\030\012\155\013\043\014\051\015\045\020\071" +
    "\021\066\022\067\023\044\024\035\040\244\050\053\052" +
    "\060\062\037\067\042\075\041\077\065\100\052\106\063" +
    "\001\002\000\056\006\uff92\007\uff92\010\uff92\012\uff92\013" +
    "\uff92\014\uff92\015\uff92\020\uff92\021\uff92\022\uff92\023\uff92" +
    "\024\uff92\040\uff92\050\uff92\051\245\052\uff92\062\uff92\067" +
    "\uff92\075\uff92\077\uff92\100\uff92\106\uff92\001\002\000\004" +
    "\044\246\001\002\000\006\052\060\062\037\001\002\000" +
    "\054\006\uff96\007\uff96\010\uff96\012\uff96\013\uff96\014\uff96" +
    "\015\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96\040" +
    "\uff96\050\uff96\052\uff96\062\uff96\067\uff96\075\uff96\077\uff96" +
    "\100\uff96\106\uff96\001\002\000\004\110\251\001\002\000" +
    "\004\054\252\001\002\000\004\037\253\001\002\000\054" +
    "\006\032\007\050\010\030\013\043\014\051\015\045\020" +
    "\071\021\066\022\067\023\044\024\035\030\070\046\064" +
    "\050\053\052\060\062\037\067\042\075\041\077\065\100" +
    "\052\106\063\001\002\000\054\006\032\007\050\010\030" +
    "\012\155\013\043\014\051\015\045\020\071\021\066\022" +
    "\067\023\044\024\035\040\255\050\053\052\060\062\037" +
    "\067\042\075\041\077\065\100\052\106\063\001\002\000" +
    "\056\006\uff91\007\uff91\010\uff91\012\uff91\013\uff91\014\uff91" +
    "\015\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\040" +
    "\uff91\050\uff91\051\256\052\uff91\062\uff91\067\uff91\075\uff91" +
    "\077\uff91\100\uff91\106\uff91\001\002\000\004\044\257\001" +
    "\002\000\006\052\060\062\037\001\002\000\054\006\uff95" +
    "\007\uff95\010\uff95\012\uff95\013\uff95\014\uff95\015\uff95\020" +
    "\uff95\021\uff95\022\uff95\023\uff95\024\uff95\040\uff95\050\uff95" +
    "\052\uff95\062\uff95\067\uff95\075\uff95\077\uff95\100\uff95\106" +
    "\uff95\001\002\000\060\006\uff9c\007\uff9c\010\uff9c\012\uff9c" +
    "\013\uff9c\014\uff9c\015\uff9c\020\uff9c\021\uff9c\022\uff9c\023" +
    "\uff9c\024\uff9c\037\263\040\uff9c\050\uff9c\051\262\052\uff9c" +
    "\062\uff9c\067\uff9c\075\uff9c\077\uff9c\100\uff9c\106\uff9c\001" +
    "\002\000\004\044\271\001\002\000\054\006\032\007\050" +
    "\010\030\013\043\014\051\015\045\020\071\021\066\022" +
    "\067\023\044\024\035\030\070\046\064\050\053\052\060" +
    "\062\037\067\042\075\041\077\065\100\052\106\063\001" +
    "\002\000\054\006\032\007\050\010\030\012\155\013\043" +
    "\014\051\015\045\020\071\021\066\022\067\023\044\024" +
    "\035\040\265\050\053\052\060\062\037\067\042\075\041" +
    "\077\065\100\052\106\063\001\002\000\056\006\uff94\007" +
    "\uff94\010\uff94\012\uff94\013\uff94\014\uff94\015\uff94\020\uff94" +
    "\021\uff94\022\uff94\023\uff94\024\uff94\040\uff94\050\uff94\051" +
    "\266\052\uff94\062\uff94\067\uff94\075\uff94\077\uff94\100\uff94" +
    "\106\uff94\001\002\000\004\044\267\001\002\000\006\052" +
    "\060\062\037\001\002\000\054\006\uff98\007\uff98\010\uff98" +
    "\012\uff98\013\uff98\014\uff98\015\uff98\020\uff98\021\uff98\022" +
    "\uff98\023\uff98\024\uff98\040\uff98\050\uff98\052\uff98\062\uff98" +
    "\067\uff98\075\uff98\077\uff98\100\uff98\106\uff98\001\002\000" +
    "\006\052\060\062\037\001\002\000\054\006\uff9a\007\uff9a" +
    "\010\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\020\uff9a\021" +
    "\uff9a\022\uff9a\023\uff9a\024\uff9a\040\uff9a\050\uff9a\052\uff9a" +
    "\062\uff9a\067\uff9a\075\uff9a\077\uff9a\100\uff9a\106\uff9a\001" +
    "\002\000\014\006\032\007\050\015\045\046\276\047\274" +
    "\001\002\000\004\035\307\001\002\000\004\035\303\001" +
    "\002\000\004\035\277\001\002\000\004\037\300\001\002" +
    "\000\006\052\060\062\037\001\002\000\004\040\302\001" +
    "\002\000\054\006\uff9f\007\uff9f\010\uff9f\012\uff9f\013\uff9f" +
    "\014\uff9f\015\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024" +
    "\uff9f\040\uff9f\050\uff9f\052\uff9f\062\uff9f\067\uff9f\075\uff9f" +
    "\077\uff9f\100\uff9f\106\uff9f\001\002\000\004\037\304\001" +
    "\002\000\006\052\060\062\037\001\002\000\004\040\306" +
    "\001\002\000\054\006\uff9d\007\uff9d\010\uff9d\012\uff9d\013" +
    "\uff9d\014\uff9d\015\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d" +
    "\024\uff9d\040\uff9d\050\uff9d\052\uff9d\062\uff9d\067\uff9d\075" +
    "\uff9d\077\uff9d\100\uff9d\106\uff9d\001\002\000\004\037\310" +
    "\001\002\000\006\052\060\062\037\001\002\000\004\040" +
    "\312\001\002\000\054\006\uff9e\007\uff9e\010\uff9e\012\uff9e" +
    "\013\uff9e\014\uff9e\015\uff9e\020\uff9e\021\uff9e\022\uff9e\023" +
    "\uff9e\024\uff9e\040\uff9e\050\uff9e\052\uff9e\062\uff9e\067\uff9e" +
    "\075\uff9e\077\uff9e\100\uff9e\106\uff9e\001\002\000\006\005" +
    "\314\007\315\001\002\000\004\007\324\001\002\000\004" +
    "\036\316\001\002\000\004\005\317\001\002\000\004\007" +
    "\320\001\002\000\004\005\321\001\002\000\004\035\322" +
    "\001\002\000\004\044\323\001\002\000\054\006\uff8d\007" +
    "\uff8d\010\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\020\uff8d" +
    "\021\uff8d\022\uff8d\023\uff8d\024\uff8d\040\uff8d\050\uff8d\052" +
    "\uff8d\062\uff8d\067\uff8d\075\uff8d\077\uff8d\100\uff8d\106\uff8d" +
    "\001\002\000\004\005\325\001\002\000\004\035\326\001" +
    "\002\000\004\044\327\001\002\000\054\006\uff8e\007\uff8e" +
    "\010\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\020\uff8e\021" +
    "\uff8e\022\uff8e\023\uff8e\024\uff8e\040\uff8e\050\uff8e\052\uff8e" +
    "\062\uff8e\067\uff8e\075\uff8e\077\uff8e\100\uff8e\106\uff8e\001" +
    "\002\000\006\014\332\046\333\001\002\000\004\035\352" +
    "\001\002\000\004\006\342\001\002\000\004\017\334\001" +
    "\002\000\004\047\335\001\002\000\004\044\336\001\002" +
    "\000\006\031\170\046\171\001\002\000\004\044\340\001" +
    "\002\000\006\030\070\046\064\001\002\000\004\035\uffbe" +
    "\001\002\000\004\046\343\001\002\000\004\017\344\001" +
    "\002\000\004\047\345\001\002\000\004\044\346\001\002" +
    "\000\006\031\170\046\171\001\002\000\004\044\350\001" +
    "\002\000\006\030\070\046\064\001\002\000\004\035\uffbf" +
    "\001\002\000\004\037\353\001\002\000\056\006\032\007" +
    "\050\010\030\013\043\014\051\015\045\020\071\021\066" +
    "\022\067\023\044\024\035\030\070\040\354\046\064\050" +
    "\053\052\060\062\037\067\042\075\041\077\065\100\052" +
    "\106\063\001\002\000\054\006\uffc0\007\uffc0\010\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\020\uffc0\021\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\040\uffc0\050\uffc0\052\uffc0\062\uffc0\067" +
    "\uffc0\075\uffc0\077\uffc0\100\uffc0\106\uffc0\001\002\000\054" +
    "\006\032\007\050\010\030\012\155\013\043\014\051\015" +
    "\045\020\071\021\066\022\067\023\044\024\035\040\356" +
    "\050\053\052\060\062\037\067\042\075\041\077\065\100" +
    "\052\106\063\001\002\000\054\006\uffc1\007\uffc1\010\uffc1" +
    "\012\uffc1\013\uffc1\014\uffc1\015\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\040\uffc1\050\uffc1\052\uffc1\062\uffc1" +
    "\067\uffc1\075\uffc1\077\uffc1\100\uffc1\106\uffc1\001\002\000" +
    "\006\017\361\027\360\001\002\000\004\005\370\001\002" +
    "\000\004\005\362\001\002\000\006\005\363\046\364\001" +
    "\002\000\004\044\367\001\002\000\004\005\365\001\002" +
    "\000\004\044\366\001\002\000\056\006\uffcf\007\uffcf\010" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\035\uffcf\040\uffcf\050\uffcf\052" +
    "\uffcf\062\uffcf\067\uffcf\075\uffcf\077\uffcf\100\uffcf\106\uffcf" +
    "\001\002\000\056\006\uffd1\007\uffd1\010\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\035\uffd1\040\uffd1\050\uffd1\052\uffd1\062\uffd1\067" +
    "\uffd1\075\uffd1\077\uffd1\100\uffd1\106\uffd1\001\002\000\006" +
    "\005\371\046\372\001\002\000\004\044\375\001\002\000" +
    "\004\005\373\001\002\000\004\044\374\001\002\000\056" +
    "\006\uffd0\007\uffd0\010\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\035\uffd0" +
    "\040\uffd0\050\uffd0\052\uffd0\062\uffd0\067\uffd0\075\uffd0\077" +
    "\uffd0\100\uffd0\106\uffd0\001\002\000\056\006\uffd2\007\uffd2" +
    "\010\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\020\uffd2\021" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\035\uffd2\040\uffd2\050\uffd2" +
    "\052\uffd2\062\uffd2\067\uffd2\075\uffd2\077\uffd2\100\uffd2\106" +
    "\uffd2\001\002\000\006\017\u0100\044\377\001\002\000\056" +
    "\006\uffdc\007\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\035\uffdc" +
    "\040\uffdc\050\uffdc\052\uffdc\062\uffdc\067\uffdc\075\uffdc\077" +
    "\uffdc\100\uffdc\106\uffdc\001\002\000\004\047\u0101\001\002" +
    "\000\004\044\u0102\001\002\000\056\006\uffd9\007\uffd9\010" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\035\uffd9\040\uffd9\050\uffd9\052" +
    "\uffd9\062\uffd9\067\uffd9\075\uffd9\077\uffd9\100\uffd9\106\uffd9" +
    "\001\002\000\006\031\170\046\171\001\002\000\004\035" +
    "\u0105\001\002\000\004\037\u0106\001\002\000\056\006\032" +
    "\007\050\010\030\013\043\014\051\015\045\020\071\021" +
    "\066\022\067\023\044\024\035\030\070\040\u0107\046\064" +
    "\050\053\052\060\062\037\067\042\075\041\077\065\100" +
    "\052\106\063\001\002\000\054\006\uffc4\007\uffc4\010\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\015\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\040\uffc4\050\uffc4\052\uffc4\062\uffc4" +
    "\067\uffc4\075\uffc4\077\uffc4\100\uffc4\106\uffc4\001\002\000" +
    "\054\006\032\007\050\010\030\012\155\013\043\014\051" +
    "\015\045\020\071\021\066\022\067\023\044\024\035\040" +
    "\u0109\050\053\052\060\062\037\067\042\075\041\077\065" +
    "\100\052\106\063\001\002\000\054\006\uffc5\007\uffc5\010" +
    "\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\040\uffc5\050\uffc5\052\uffc5\062" +
    "\uffc5\067\uffc5\075\uffc5\077\uffc5\100\uffc5\106\uffc5\001\002" +
    "\000\004\044\u010f\001\002\000\004\044\u010e\001\002\000" +
    "\006\026\172\044\u010d\001\002\000\054\006\uffb9\007\uffb9" +
    "\010\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\040\uffb9\050\uffb9\052\uffb9" +
    "\062\uffb9\067\uffb9\075\uffb9\077\uffb9\100\uffb9\106\uffb9\001" +
    "\002\000\054\006\uffb7\007\uffb7\010\uffb7\012\uffb7\013\uffb7" +
    "\014\uffb7\015\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\040\uffb7\050\uffb7\052\uffb7\062\uffb7\067\uffb7\075\uffb7" +
    "\077\uffb7\100\uffb7\106\uffb7\001\002\000\054\006\uffb8\007" +
    "\uffb8\010\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\040\uffb8\050\uffb8\052" +
    "\uffb8\062\uffb8\067\uffb8\075\uffb8\077\uffb8\100\uffb8\106\uffb8" +
    "\001\002\000\012\005\u0112\046\u0114\047\u0111\110\u0113\001" +
    "\002\000\006\026\u0130\044\u012f\001\002\000\006\005\u0124" +
    "\046\u0125\001\002\000\006\046\u011a\110\u0119\001\002\000" +
    "\006\026\u0116\044\u0115\001\002\000\054\006\uffab\007\uffab" +
    "\010\uffab\012\uffab\013\uffab\014\uffab\015\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\040\uffab\050\uffab\052\uffab" +
    "\062\uffab\067\uffab\075\uffab\077\uffab\100\uffab\106\uffab\001" +
    "\002\000\004\111\u0117\001\002\000\004\044\u0118\001\002" +
    "\000\054\006\uffa5\007\uffa5\010\uffa5\012\uffa5\013\uffa5\014" +
    "\uffa5\015\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5" +
    "\040\uffa5\050\uffa5\052\uffa5\062\uffa5\067\uffa5\075\uffa5\077" +
    "\uffa5\100\uffa5\106\uffa5\001\002\000\006\026\u0121\044\u0120" +
    "\001\002\000\004\110\u011b\001\002\000\006\026\u011d\044" +
    "\u011c\001\002\000\054\006\uffa7\007\uffa7\010\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\015\uffa7\020\uffa7\021\uffa7\022\uffa7\023" +
    "\uffa7\024\uffa7\040\uffa7\050\uffa7\052\uffa7\062\uffa7\067\uffa7" +
    "\075\uffa7\077\uffa7\100\uffa7\106\uffa7\001\002\000\004\111" +
    "\u011e\001\002\000\004\044\u011f\001\002\000\054\006\uffa1" +
    "\007\uffa1\010\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\040\uffa1\050\uffa1" +
    "\052\uffa1\062\uffa1\067\uffa1\075\uffa1\077\uffa1\100\uffa1\106" +
    "\uffa1\001\002\000\054\006\uffa6\007\uffa6\010\uffa6\012\uffa6" +
    "\013\uffa6\014\uffa6\015\uffa6\020\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\024\uffa6\040\uffa6\050\uffa6\052\uffa6\062\uffa6\067\uffa6" +
    "\075\uffa6\077\uffa6\100\uffa6\106\uffa6\001\002\000\004\111" +
    "\u0122\001\002\000\004\044\u0123\001\002\000\054\006\uffa0" +
    "\007\uffa0\010\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\040\uffa0\050\uffa0" +
    "\052\uffa0\062\uffa0\067\uffa0\075\uffa0\077\uffa0\100\uffa0\106" +
    "\uffa0\001\002\000\006\026\u012c\044\u012b\001\002\000\004" +
    "\005\u0126\001\002\000\006\026\u0128\044\u0127\001\002\000" +
    "\054\006\uffaa\007\uffaa\010\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\040" +
    "\uffaa\050\uffaa\052\uffaa\062\uffaa\067\uffaa\075\uffaa\077\uffaa" +
    "\100\uffaa\106\uffaa\001\002\000\004\111\u0129\001\002\000" +
    "\004\044\u012a\001\002\000\054\006\uffa4\007\uffa4\010\uffa4" +
    "\012\uffa4\013\uffa4\014\uffa4\015\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\023\uffa4\024\uffa4\040\uffa4\050\uffa4\052\uffa4\062\uffa4" +
    "\067\uffa4\075\uffa4\077\uffa4\100\uffa4\106\uffa4\001\002\000" +
    "\054\006\uffa9\007\uffa9\010\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\015\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\040" +
    "\uffa9\050\uffa9\052\uffa9\062\uffa9\067\uffa9\075\uffa9\077\uffa9" +
    "\100\uffa9\106\uffa9\001\002\000\004\111\u012d\001\002\000" +
    "\004\044\u012e\001\002\000\054\006\uffa3\007\uffa3\010\uffa3" +
    "\012\uffa3\013\uffa3\014\uffa3\015\uffa3\020\uffa3\021\uffa3\022" +
    "\uffa3\023\uffa3\024\uffa3\040\uffa3\050\uffa3\052\uffa3\062\uffa3" +
    "\067\uffa3\075\uffa3\077\uffa3\100\uffa3\106\uffa3\001\002\000" +
    "\054\006\uffa8\007\uffa8\010\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\040" +
    "\uffa8\050\uffa8\052\uffa8\062\uffa8\067\uffa8\075\uffa8\077\uffa8" +
    "\100\uffa8\106\uffa8\001\002\000\004\111\u0131\001\002\000" +
    "\004\044\u0132\001\002\000\054\006\uffa2\007\uffa2\010\uffa2" +
    "\012\uffa2\013\uffa2\014\uffa2\015\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\024\uffa2\040\uffa2\050\uffa2\052\uffa2\062\uffa2" +
    "\067\uffa2\075\uffa2\077\uffa2\100\uffa2\106\uffa2\001\002\000" +
    "\004\037\u0134\001\002\000\054\006\032\007\050\010\030" +
    "\013\043\014\051\015\045\020\071\021\066\022\067\023" +
    "\044\024\035\030\070\046\064\050\053\052\060\062\037" +
    "\067\042\075\041\077\065\100\052\106\063\001\002\000" +
    "\054\006\032\007\050\010\030\012\155\013\043\014\051" +
    "\015\045\020\071\021\066\022\067\023\044\024\035\040" +
    "\u0136\050\053\052\060\062\037\067\042\075\041\077\065" +
    "\100\052\106\063\001\002\000\056\006\uff90\007\uff90\010" +
    "\uff90\012\uff90\013\uff90\014\uff90\015\uff90\020\uff90\021\uff90" +
    "\022\uff90\023\uff90\024\uff90\040\uff90\050\uff90\051\u0137\052" +
    "\uff90\062\uff90\067\uff90\075\uff90\077\uff90\100\uff90\106\uff90" +
    "\001\002\000\004\044\u0138\001\002\000\054\006\uff8f\007" +
    "\uff8f\010\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\020\uff8f" +
    "\021\uff8f\022\uff8f\023\uff8f\024\uff8f\040\uff8f\050\uff8f\052" +
    "\uff8f\062\uff8f\067\uff8f\075\uff8f\077\uff8f\100\uff8f\106\uff8f" +
    "\001\002\000\004\002\ufffb\001\002\000\004\046\u014f\001" +
    "\002\000\012\017\u013f\027\u013c\030\u013e\044\u013d\001\002" +
    "\000\004\047\u014a\001\002\000\056\006\uffdb\007\uffdb\010" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\023\uffdb\024\uffdb\035\uffdb\040\uffdb\050\uffdb\052" +
    "\uffdb\062\uffdb\067\uffdb\075\uffdb\077\uffdb\100\uffdb\106\uffdb" +
    "\001\002\000\004\044\u0149\001\002\000\006\046\u0141\047" +
    "\u0140\001\002\000\006\044\u0145\045\u0146\001\002\000\004" +
    "\020\u0142\001\002\000\004\047\u0143\001\002\000\004\044" +
    "\u0144\001\002\000\056\006\uffd3\007\uffd3\010\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\020\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\035\uffd3\040\uffd3\050\uffd3\052\uffd3\062\uffd3" +
    "\067\uffd3\075\uffd3\077\uffd3\100\uffd3\106\uffd3\001\002\000" +
    "\056\006\uffd7\007\uffd7\010\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\035" +
    "\uffd7\040\uffd7\050\uffd7\052\uffd7\062\uffd7\067\uffd7\075\uffd7" +
    "\077\uffd7\100\uffd7\106\uffd7\001\002\000\004\047\u0147\001" +
    "\002\000\004\044\u0148\001\002\000\056\006\uffd6\007\uffd6" +
    "\010\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\035\uffd6\040\uffd6\050\uffd6" +
    "\052\uffd6\062\uffd6\067\uffd6\075\uffd6\077\uffd6\100\uffd6\106" +
    "\uffd6\001\002\000\056\006\uffd5\007\uffd5\010\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\035\uffd5\040\uffd5\050\uffd5\052\uffd5\062\uffd5" +
    "\067\uffd5\075\uffd5\077\uffd5\100\uffd5\106\uffd5\001\002\000" +
    "\006\044\u014b\045\u014c\001\002\000\056\006\uffda\007\uffda" +
    "\010\uffda\012\uffda\013\uffda\014\uffda\015\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\035\uffda\040\uffda\050\uffda" +
    "\052\uffda\062\uffda\067\uffda\075\uffda\077\uffda\100\uffda\106" +
    "\uffda\001\002\000\004\047\u014d\001\002\000\004\044\u014e" +
    "\001\002\000\056\006\uffd8\007\uffd8\010\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\035\uffd8\040\uffd8\050\uffd8\052\uffd8\062\uffd8\067" +
    "\uffd8\075\uffd8\077\uffd8\100\uffd8\106\uffd8\001\002\000\004" +
    "\044\u0150\001\002\000\056\006\uffd4\007\uffd4\010\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\015\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\035\uffd4\040\uffd4\050\uffd4\052\uffd4\062" +
    "\uffd4\067\uffd4\075\uffd4\077\uffd4\100\uffd4\106\uffd4\001\002" +
    "\000\006\031\170\046\171\001\002\000\004\035\u0153\001" +
    "\002\000\004\037\u0154\001\002\000\056\006\032\007\050" +
    "\010\030\013\043\014\051\015\045\020\071\021\066\022" +
    "\067\023\044\024\035\030\070\040\u0155\046\064\050\053" +
    "\052\060\062\037\067\042\075\041\077\065\100\052\106" +
    "\063\001\002\000\004\011\u0161\001\002\000\054\006\032" +
    "\007\050\010\030\012\155\013\043\014\051\015\045\020" +
    "\071\021\066\022\067\023\044\024\035\040\u0157\050\053" +
    "\052\060\062\037\067\042\075\041\077\065\100\052\106" +
    "\063\001\002\000\006\011\u0159\034\u0158\001\002\000\006" +
    "\031\170\046\171\001\002\000\004\037\u015a\001\002\000" +
    "\054\006\032\007\050\010\030\013\043\014\051\015\045" +
    "\020\071\021\066\022\067\023\044\024\035\030\070\046" +
    "\064\050\053\052\060\062\037\067\042\075\041\077\065" +
    "\100\052\106\063\001\002\000\054\006\032\007\050\010" +
    "\030\012\155\013\043\014\051\015\045\020\071\021\066" +
    "\022\067\023\044\024\035\040\u015c\050\053\052\060\062" +
    "\037\067\042\075\041\077\065\100\052\106\063\001\002" +
    "\000\054\006\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\040\uffc7\050\uffc7\052\uffc7\062\uffc7\067\uffc7\075\uffc7\077" +
    "\uffc7\100\uffc7\106\uffc7\001\002\000\004\035\u015e\001\002" +
    "\000\004\037\u015f\001\002\000\004\040\u0160\001\002\000" +
    "\054\006\uffce\007\uffce\010\uffce\012\uffce\013\uffce\014\uffce" +
    "\015\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\040" +
    "\uffce\050\uffce\052\uffce\062\uffce\067\uffce\075\uffce\077\uffce" +
    "\100\uffce\106\uffce\001\002\000\004\037\u0162\001\002\000" +
    "\004\040\u0163\001\002\000\054\006\uffc6\007\uffc6\010\uffc6" +
    "\012\uffc6\013\uffc6\014\uffc6\015\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\040\uffc6\050\uffc6\052\uffc6\062\uffc6" +
    "\067\uffc6\075\uffc6\077\uffc6\100\uffc6\106\uffc6\001\002\000" +
    "\004\002\001\001\002\000\004\035\u0166\001\002\000\004" +
    "\037\u0167\001\002\000\054\006\032\007\050\010\030\013" +
    "\043\014\051\015\045\020\071\021\066\022\067\023\044" +
    "\024\035\030\070\046\064\050\053\052\060\062\037\067" +
    "\042\075\041\077\065\100\052\106\063\001\002\000\054" +
    "\006\032\007\050\010\030\012\155\013\043\014\051\015" +
    "\045\020\071\021\066\022\067\023\044\024\035\040\u0169" +
    "\050\053\052\060\062\037\067\042\075\041\077\065\100" +
    "\052\106\063\001\002\000\004\002\ufffa\001\002\000\006" +
    "\034\u016c\047\u016b\001\002\000\016\002\ufff9\015\010\043" +
    "\006\101\011\102\004\105\005\001\002\000\004\046\u016d" +
    "\001\002\000\004\035\u016e\001\002\000\016\002\ufff9\015" +
    "\010\043\006\101\011\102\004\105\005\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\ufffc\001\002\000\004\104" +
    "\u0172\001\002\000\004\044\u0173\001\002\000\016\002\ufff9" +
    "\015\010\043\006\101\011\102\004\105\005\001\002\000" +
    "\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0172\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\003\035\004\056\005\025\006\046\007" +
    "\026\010\061\012\037\015\030\016\045\017\053\020\060" +
    "\021\055\022\032\023\054\024\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\143\006\145\007\150\010\141" +
    "\011\152\012\156\015\140\016\157\017\142\020\155\021" +
    "\144\022\153\023\146\024\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u010a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\137\004\056" +
    "\005\025\006\046\007\026\010\061\012\037\015\030\016" +
    "\045\017\053\020\060\021\055\022\032\023\054\024\033" +
    "\001\001\000\036\004\143\006\145\007\150\010\141\011" +
    "\152\012\156\015\140\016\157\017\142\020\155\021\144" +
    "\022\153\023\146\024\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\162" +
    "\004\056\005\025\006\046\007\026\010\061\012\037\015" +
    "\030\016\045\017\053\020\060\021\055\022\032\023\054" +
    "\024\033\001\001\000\002\001\001\000\036\004\143\006" +
    "\145\007\150\010\141\011\152\012\156\015\140\016\157" +
    "\017\142\020\155\021\144\022\153\023\146\024\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\211\004\056\005\025\006\046\007\026\010\061\012" +
    "\037\015\030\016\045\017\053\020\060\021\055\022\032" +
    "\023\054\024\033\001\001\000\036\004\143\006\145\007" +
    "\150\010\141\011\152\012\156\015\140\016\157\017\142" +
    "\020\155\021\144\022\153\023\146\024\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\216\004\056\005\025\006\046\007\026\010\061\012" +
    "\037\015\030\016\045\017\053\020\060\021\055\022\032" +
    "\023\054\024\033\001\001\000\036\004\143\006\145\007" +
    "\150\010\141\011\152\012\156\015\140\016\157\017\142" +
    "\020\155\021\144\022\153\023\146\024\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\227\004\056\005\025\006\046\007\026" +
    "\010\061\012\037\015\030\016\045\017\053\020\060\021" +
    "\055\022\032\023\054\024\033\001\001\000\036\004\143" +
    "\006\145\007\150\010\141\011\152\012\156\015\140\016" +
    "\157\017\142\020\155\021\144\022\153\023\146\024\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\233\001\001\000\002\001\001\000\004\022\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\242\004\056\005\025\006\046" +
    "\007\026\010\061\012\037\015\030\016\045\017\053\020" +
    "\060\021\055\022\032\023\054\024\033\001\001\000\036" +
    "\004\143\006\145\007\150\010\141\011\152\012\156\015" +
    "\140\016\157\017\142\020\155\021\144\022\153\023\146" +
    "\024\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\253\004" +
    "\056\005\025\006\046\007\026\010\061\012\037\015\030" +
    "\016\045\017\053\020\060\021\055\022\032\023\054\024" +
    "\033\001\001\000\036\004\143\006\145\007\150\010\141" +
    "\011\152\012\156\015\140\016\157\017\142\020\155\021" +
    "\144\022\153\023\146\024\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\257\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\263" +
    "\004\056\005\025\006\046\007\026\010\061\012\037\015" +
    "\030\016\045\017\053\020\060\021\055\022\032\023\054" +
    "\024\033\001\001\000\036\004\143\006\145\007\150\010" +
    "\141\011\152\012\156\015\140\016\157\017\142\020\155" +
    "\021\144\022\153\023\146\024\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\267\001\001\000\002" +
    "\001\001\000\004\022\271\001\001\000\002\001\001\000" +
    "\004\004\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\304\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\310\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\336\001\001\000" +
    "\002\001\001\000\004\005\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\346\001\001\000\002\001\001" +
    "\000\004\005\350\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\354\004\056\005\025\006\046\007\026" +
    "\010\061\012\037\015\030\016\045\017\053\020\060\021" +
    "\055\022\032\023\054\024\033\001\001\000\002\001\001" +
    "\000\036\004\143\006\145\007\150\010\141\011\152\012" +
    "\156\015\140\016\157\017\142\020\155\021\144\022\153" +
    "\023\146\024\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0103\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\u0107\004\056\005\025\006\046\007\026\010" +
    "\061\012\037\015\030\016\045\017\053\020\060\021\055" +
    "\022\032\023\054\024\033\001\001\000\002\001\001\000" +
    "\036\004\143\006\145\007\150\010\141\011\152\012\156" +
    "\015\140\016\157\017\142\020\155\021\144\022\153\023" +
    "\146\024\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\003\u0134\004" +
    "\056\005\025\006\046\007\026\010\061\012\037\015\030" +
    "\016\045\017\053\020\060\021\055\022\032\023\054\024" +
    "\033\001\001\000\036\004\143\006\145\007\150\010\141" +
    "\011\152\012\156\015\140\016\157\017\142\020\155\021" +
    "\144\022\153\023\146\024\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0151\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\u0155\004\056\005\025\006\046\007\026" +
    "\010\061\012\037\015\030\016\045\017\053\020\060\021" +
    "\055\022\032\023\054\024\033\001\001\000\002\001\001" +
    "\000\036\004\143\006\145\007\150\010\141\011\152\012" +
    "\156\015\140\016\157\017\142\020\155\021\144\022\153" +
    "\023\146\024\151\001\001\000\002\001\001\000\004\013" +
    "\u015c\001\001\000\002\001\001\000\040\003\u015a\004\056" +
    "\005\025\006\046\007\026\010\061\012\037\015\030\016" +
    "\045\017\053\020\060\021\055\022\032\023\054\024\033" +
    "\001\001\000\036\004\143\006\145\007\150\010\141\011" +
    "\152\012\156\015\140\016\157\017\142\020\155\021\144" +
    "\022\153\023\146\024\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\003\u0167\004\056\005\025\006\046\007\026\010" +
    "\061\012\037\015\030\016\045\017\053\020\060\021\055" +
    "\022\032\023\054\024\033\001\001\000\036\004\143\006" +
    "\145\007\150\010\141\011\152\012\156\015\140\016\157" +
    "\017\142\020\155\021\144\022\153\023\146\024\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\u016f" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\u016e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\u0173\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SIMBOLO_MAT ::= Potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMBOLO_MAT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SIMBOLO_MAT ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMBOLO_MAT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SIMBOLO_MAT ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMBOLO_MAT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SIMBOLO_MAT ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMBOLO_MAT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SIMBOLO_MAT ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SIMBOLO_MAT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PRINTF ::= Printf Parent_a Cadena Coma Comillas Cadena Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PRINTF ::= Printf Parent_a Comillas Cadena Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CASE ::= Default D_puntos Llave_a SENTENCIA Llave_c Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CASE ::= Default D_puntos Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CASE ::= Case Sencilla Identificador Sencilla D_puntos Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CASE ::= Case Comillas Identificador Comillas D_puntos Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CASE ::= Case Identificador D_puntos Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CASE ::= Case Numero D_puntos Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CASE ::= Case Sencilla Identificador Sencilla D_puntos Llave_a SENTENCIA Llave_c Break P_coma CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CASE ::= Case Comillas Identificador Comillas D_puntos Llave_a SENTENCIA Llave_c Break P_coma CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CASE ::= Case Identificador D_puntos Llave_a SENTENCIA Llave_c Break P_coma CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CASE ::= Case Numero D_puntos Llave_a SENTENCIA Llave_c Break P_coma CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CASE ::= Case Identificador D_puntos Break P_coma CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CASE ::= Case Numero D_puntos Break P_coma CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CASE ::= Case Identificador D_puntos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CASE ::= Case Numero D_puntos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SWITCH ::= Switch Parent_a DECLARACION Parent_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SWITCH ::= Switch Parent_a Numero Parent_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // COUT ::= Cout Op_relacional Sencilla Sencilla Op_relacional Endl P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // COUT ::= Cout Op_relacional Sencilla Identificador Sencilla Op_relacional Endl P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // COUT ::= Cout Op_relacional Numero Op_relacional Endl P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // COUT ::= Cout Op_relacional Comillas Comillas Op_relacional Endl P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // COUT ::= Cout Op_relacional Comillas Identificador Comillas Op_relacional Endl P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // COUT ::= Cout Op_relacional Identificador Op_relacional Endl P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // COUT ::= Cout Op_relacional Sencilla Sencilla P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // COUT ::= Cout Op_relacional Sencilla Identificador Sencilla P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COUT ::= Cout Op_relacional Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // COUT ::= Cout Op_relacional Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // COUT ::= Cout Op_relacional Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // COUT ::= Cout Op_relacional Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CIN ::= Cin Op_relacional Numero Op_relacional Endl P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CIN ::= Cin Op_relacional Sencilla Sencilla Op_relacional Endl P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CIN ::= Cin Op_relacional Comillas Comillas Op_relacional Endl P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CIN ::= Cin Op_relacional Comillas Cadena Comillas Op_relacional Endl P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CIN ::= Cin Op_relacional Identificador Op_relacional Endl P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CIN ::= Cin Op_relacional Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CIN ::= Cin Op_relacional Sencilla Sencilla P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CIN ::= Cin Op_relacional Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CIN ::= Cin Op_relacional Comillas Cadena Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CIN ::= Cin Op_relacional Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIN",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TRY_CATCH ::= Try Llave_a SENTENCIA Llave_c Catch Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TRY_CATCH",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_RETORNO ::= Return SENTENCIA_BOOLEANA P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_RETORNO ::= Return Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_RETORNO ::= Return Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_RETORNO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION_FOR ::= Identificador Op_atribucion Identificador Suma Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_FOR ::= For T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DO_WHILE ::= Do Llave_a Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a Llave_c Else Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= T_dato Identificador Igual Identificador Suma Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= T_dato Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= T_dato Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= SIMBOLO_MAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= SENTENCIA SIMBOLO_MAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= SENTENCIA CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= TRY_CATCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA TRY_CATCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA_RETORNO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA SENTENCIA_RETORNO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Define Identificador Numero INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Define Identificador Parent_a Identificador Parent_c INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Using Namespace Std P_coma INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Include Op_relacional Identificador Punto Identificador Op_relacional INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Include Op_relacional Identificador Op_relacional INICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

